{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.1",
    "title": "Kapusta",
    "description": "API documentation for team project 'Kapusta'",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "http://localhost:3000" },
{ "url": "https://kapusta-wwgw.onrender.com/" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Transactions",
      "description": "Transavtions endpoints"
    },
    {
      "name": "User",
      "description": "User's endpoints"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Conflict / Email in use!",
            "content": {}
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Email or password is wrong",
            "content": {}
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": ["Auth"],
        "summary": "Google authentication",
        "responses": {
          "200": {
            "description": "Successful operation / redirect to frontend",
            "content": {}
          }
        },
        "400": {
          "description": "Bad request (invalid request body)",
          "content": {}
        },
        "409": {
          "description": "Email in use!",
          "content": {}
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "refresh token",
        "parameters": [],
        "requestBody": {
          "description": "refresh token",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/transactions/": {
        "post": {
            "tags": ["Transactions"],
            "summary": "Add new expence or income transaction",
            "security": [{ "Bearer": [] }],
            "parameters": [],
            "requestBody": {
                "description": "transaction object",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/TransactionRequest"
                    }
                  }
                }
            },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponce"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (field is required)/ No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
        }
    },
    "/transactions/{operation}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get all transactions for month",
        "parameters": [
          {
            "name": "operation",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["expense", "income"],
              "description": "operation must be 'expense' or 'income'"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request!",
            "content": {}
          }
        }
      }
    },
    "/transactions/report/{operation}": {
        "get": {
          "tags": ["Transactions"],
          "summary": "Get transactions report for some period",
          "security": [{ "Bearer": [] }],
          "parameters": [
            {
              "name": "operation",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "enum": ["expense", "income"],
                "description": "operation must be 'expense' or 'income'"
              }
            },
            {
              "name": "year",
              "in": "query",
              "required": true,
              "schema": {
                "type": "integer",
                "description": "for which year you want report"
              }
            },
            {
              "name": "month",
              "in": "query",
              "required": true,
              "schema": {
                "type": "integer",
                "description": "for which month you want report"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TransactionReport"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request (invalid 'date' format) / No token provided",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "404": {
              "description": "Invalid user / Invalid session",
              "content": {}
            }
          }
        }
    },
    "/transactions/{transactionId}": {
        "delete": {
          "tags": ["Transactions"],
          "summary": "Delete transaction",
          "security": [{ "Bearer": [] }],
          "parameters": [
            {
              "name": "transactionId",
              "type": "string",
              "description": "Transaction's id",
              "required": true,
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "description": "Transaction is deleted",
              "content": {}
            },
            "400": {
              "description": "Bad request (invalid id) / No token provided",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "404": {
              "description": "Invalid user / Invalid session",
              "content": {}
            }
          }
        }
    },
    "/users/update": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user's balance",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "New balance object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBalanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewBalanceResponce"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }

    },
    "/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Current user",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          }
        }
      }

    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "object",
            "properties": {
              "accessToken": {
                "type": "string",
                "description": "User's accessToken for app",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZjQ5YWQyZDkyYmY3NTQ0MDQ4ZWZkNSIsImlhdCI6MTY3Njk3NDkzNiwiZXhwIjoxNjc2OTc4NTM2fQ.J8fIHTUNL7JXGQwRJBFfbZhX1eTiGk7U48sEnJOSsrw"
              },
              "refreshToken": {
                "type": "string",
                "description": "User's refreshToken for app",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZjQ5YWQyZDkyYmY3NTQ0MDQ4ZWZkNSIsImlhdCI6MTY3Njk3NDkzNiwiZXhwIjoxNjc2OTc4NTM2fQ.J8fIHTUNL7JXGQwRJBFfbZhX1eTiGk7U48sEnJOSsrw"
              },
              "expiresIn": {
                "type": "integer",
                "description": "User's token expiresIn",
                "example": "1677613258336"
              }
            }
          },
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "user@mail.com"
              },
              "balance": {
                "type": "number",
                "description": "User's balance",
                "example": "2023"
              }
            }
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "object",
            "properties": {
              "accessToken": {
                "type": "string",
                "description": "User's accessToken for app",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZjQ5YWQyZDkyYmY3NTQ0MDQ4ZWZkNSIsImlhdCI6MTY3Njk3NDkzNiwiZXhwIjoxNjc2OTc4NTM2fQ.J8fIHTUNL7JXGQwRJBFfbZhX1eTiGk7U48sEnJOSsrw"
              },
              "refreshToken": {
                "type": "string",
                "description": "User's refreshToken for app",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZjQ5YWQyZDkyYmY3NTQ0MDQ4ZWZkNSIsImlhdCI6MTY3Njk3NDkzNiwiZXhwIjoxNjc2OTc4NTM2fQ.J8fIHTUNL7JXGQwRJBFfbZhX1eTiGk7U48sEnJOSsrw"
              },
              "expiresIn": {
                "type": "integer",
                "description": "User's token expiresIn",
                "example": "1677613258336"
              }
            }
          },
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "user@mail.com"
              },
              "balance": {
                "type": "number",
                "description": "User's balance",
                "example": "2023"
              }
            }
          }
        }
      },
      "RefreshTokenRequest": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "User's refreshToken for app",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZjQ5YWQyZDkyYmY3NTQ0MDQ4ZWZkNSIsImlhdCI6MTY3Njk3NDkzNiwiZXhwIjoxNjc2OTc4NTM2fQ.J8fIHTUNL7JXGQwRJBFfbZhX1eTiGk7U48sEnJOSsrw"
          }
        }
      },
      "RefreshTokenResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "User's accessToken for app",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZjQ5YWQyZDkyYmY3NTQ0MDQ4ZWZkNSIsImlhdCI6MTY3Njk3NDkzNiwiZXhwIjoxNjc2OTc4NTM2fQ.J8fIHTUNL7JXGQwRJBFfbZhX1eTiGk7U48sEnJOSsrw"
          },
          "refreshToken": {
            "type": "string",
            "description": "User's refreshToken for app",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZjQ5YWQyZDkyYmY3NTQ0MDQ4ZWZkNSIsImlhdCI6MTY3Njk3NDkzNiwiZXhwIjoxNjc2OTc4NTM2fQ.J8fIHTUNL7JXGQwRJBFfbZhX1eTiGk7U48sEnJOSsrw"
          },
          "expiresIn": {
            "type": "integer",
            "description": "User's token expiresIn",
            "example": "1677613258336"
          }
        }
      },
      "TransactionRequest": {
        "type": "object",
        "required": ["date", "description", "category", "sum", "operation"],
        "properties": {
          "date": {
            "type": "string",
            "description": "Expense/income date",
            "example": "2023-02-22"
          },
          "description": {
            "type": "string",
            "description": "Expense/income description",
            "example": "alcohol"
          },
          "category": {
            "type": "string",
            "description": "Expense/income date",
            "example": "Alcohol",
            "enum": [
              "Products",
              "Alcohol",
              "Entertainment",
              "Health",
              "Transport",
              "Housing",
              "Technique",
              "Communal, communication",
              "Sports, hobbies",
              "Education",
              "Other",
              "My",
              "Wife"
            ]
          },
          "sum": {
            "type": "integer",
            "description": "Expense/income amount",
            "minimum": 1,
            "maximum": 1000000000,
            "example": 1000
          },
          "operation": {
            "type": "string",
            "description": "operation type",
            "example": "expense"
          }
        }
      },
      "TransactionResponce": {
        "type": "object",
        "properties": {
          "result": {
            "date": {
              "type": "string",
              "description": "Expense/income date",
              "example": "2023-02-22"
            },
            "description": {
              "type": "string",
              "description": "Expense/income description",
              "example": "alcohol"
            },
            "category": {
              "type": "string",
              "description": "Expense/income category",
              "example": "Alcohol",
              "enum": [
                "Products",
                "Alcohol",
                "Entertainment",
                "Health",
                "Transport",
                "Housing",
                "Technique",
                "Communal, communication",
                "Sports, hobbies",
                "Education",
                "Other",
                "My",
                "Wife"
              ]
            },
            "sum": {
              "type": "integer",
              "description": "Expense/income amount",
              "minimum": 1,
              "maximum": 1000000000,
              "example": 1000
            },
            "operation": {
              "type": "string",
              "description": "operation type",
              "example": "expense"
            },
            "owner": {
              "type": "string",
              "description": "user id",
              "example": "63f4b0a8b37be52621410390"
            },
            "_id": {
              "type": "string",
              "description": "transaction id",
              "example": "63f5cc70a5590e6d9b235723"
            },
            "createdAt": {
              "type": "string",
              "description": "time of creationg expence transaction",
              "example": "2023-02-22T08:04:00.157Z"
            },
            "updatedAt": {
              "type": "string",
              "description": "time of updating expence transaction",
              "example": "2023-02-22T08:04:00.157Z"
            }
          },
          "balance": {
            "type": "integer",
            "description": "balance after expens/income transaction",
            "example": 100,
            "minimum": 1,
            "maximum": 10000000
          }
        }
      },
      "GetTransactionResponse": {
        "type": "object",
        "properties": {
          "February": {
            "type": "object",
            "properties": {
              "transactions": {
                "type": "object",
                "description": "Transaction by date",
                "properties": {
                  "_id": {
                    "type": "string",
                    "description": "Id of transaction"
                  },
                  "date": {
                    "type": "string",
                    "format": "date",
                    "description": "Date of transaction",
                    "example": "02.05.2020"
                  },
                  "description": {
                    "type": "string",
                    "description": "name of transaction",
                    "example": "pork"
                  },
                  "category": {
                    "type": "string",
                    "description": "Category of transaction",
                    "example": "products"
                  },
                  "sum": {
                    "type": "number",
                    "description": "Sum of transaction"
                  },
                  "operation": {
                    "type": "string",
                    "description": "Type of transaction",
                    "example": "expense"
                  },
                  "owner": {
                    "type": "string",
                    "description": "User's id",
                    "example": "63f474913c3d2fc9924866df"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date",
                    "description": "Date creation of transaction",
                    "example": "2023-02-21T17:39:50.076Z"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date",
                    "description": "Date updation of transaction",
                    "example": "2023-02-21T17:39:50.076Z"
                  }
                }
              },
              "total": {
                "type": "integer",
                "description": "amount of transactions"
              }
            }
          },
          "January": {
            "type": "object",
            "properties": {
              "transactions": {},
              "total": {}
            }
          },
          "December": {
            "type": "object",
            "properties": {
              "transactions": {},
              "total": {}
            }
          },
          "November": {
            "type": "object",
            "properties": {
              "transactions": {},
              "total": {}
            }
          },
          "October": {
            "type": "object",
            "properties": {
              "transactions": {},
              "total": {}
            }
          },
          "September": {
            "type": "object",
            "properties": {
              "transactions": {},
              "total": {}
            }
          }
        }
      },
      "TransactionReport": {
        "type": "object",
        "properties": {
          "income": {
            "type": "integer",
            "example": 12000
          },
          "expense": {
            "type": "integer",
            "example": 6000
          },
          "statistics": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "category of expence",
                "example": "products"
              },
              "stats": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "product name",
                    "example": "pork"
                  },
                  "total": {
                    "type": "integer",
                    "description": "total amount",
                    "example": 600
                  }
                }
              },
              "total": {
                "type": "integer",
                "description": "total in thic category",
                "example": 600
              }
            }
          }
        }
      },
      "NewBalanceRequest": {
        "required": ["newBalance"],
        "type": "object",
        "properties": {
          "balance": {
            "type": "integer",
            "description": "New balance",
            "example": 100,
            "minimum": 1,
            "maximum": 10000000
          }
        }
      },
      "NewBalanceResponce": {
        "required": ["newBalance"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "user email",
            "example": "user1@gmail.com"
          },
          "balance": {
            "type": "integer",
            "description": "New balance",
            "example": 100,
            "minimum": 1,
            "maximum": 10000000
          }
        }
      },
      "CurrentUserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "user@mail.com"
              },
              "balance": {
                "type": "number",
                "description": "User's balance",
                "example": "2023"
              }
            }
          },
          "token": {
            "type": "object",
            "properties": {
              "accessToken": {
                "type": "string",
                "description": "User's accessToken for app",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZjQ5YWQyZDkyYmY3NTQ0MDQ4ZWZkNSIsImlhdCI6MTY3Njk3NDkzNiwiZXhwIjoxNjc2OTc4NTM2fQ.J8fIHTUNL7JXGQwRJBFfbZhX1eTiGk7U48sEnJOSsrw"
              },
              "refreshToken": {
                "type": "string",
                "description": "User's refreshToken for app",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZjQ5YWQyZDkyYmY3NTQ0MDQ4ZWZkNSIsImlhdCI6MTY3Njk3NDkzNiwiZXhwIjoxNjc2OTc4NTM2fQ.J8fIHTUNL7JXGQwRJBFfbZhX1eTiGk7U48sEnJOSsrw"
              },
              "expiresIn": {
                "type": "integer",
                "description": "User's token expiresIn",
                "example": "1677613258336"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
